# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib}, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib/charms/grafana_k8s
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    ruff --fix {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell
commands =
    codespell {[vars]lib_path}
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache
    ruff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib}]
description = Run static analysis checks
deps =
    pyright==1.1.316
    charm: -r{toxinidir}/requirements.txt
    lib: ops
    lib: jinja2
    unit: {[testenv:unit]deps}
    integration: {[testenv:integration]deps}
commands =
    charm: pyright {[vars]src_path} {posargs}
    lib: pyright --pythonversion 3.8 {[vars]lib_path} {posargs}
    lib: /usr/bin/env sh -c 'for m in $(git diff main --name-only {[vars]lib_path}); do if ! git diff main $m | grep -q "+LIBPATCH\|+LIBAPI"; then echo "You forgot to bump the version on $m!"; exit 1; fi; done'
allowlist_externals = /usr/bin/env

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    responses
    cosl
    pydantic
    -r{toxinidir}/requirements.txt
commands =
    /usr/bin/env sh -c 'stat sqlite-static > /dev/null 2>&1 || curl -L https://github.com/CompuRoot/static-sqlite3/releases/latest/download/sqlite3 -o sqlite-static && chmod +x sqlite-static'
    /usr/bin/env sh -c 'stat cos-tool-amd64 > /dev/null 2>&1 || curl -L -O https://github.com/canonical/cos-tool/releases/latest/download/cos-tool-amd64'
    coverage run \
      --source={[vars]src_path},{[vars]lib_path} \
      -m pytest -v --tb native -s {posargs} {[vars]tst_path}/unit
    coverage report
allowlist_externals =
    /usr/bin/env

[testenv:scenario]
description = Run scenario tests
deps =
    pytest
    responses
    cosl
    ops-scenario==6
    -r{toxinidir}/requirements.txt
commands =
    /usr/bin/env sh -c 'stat sqlite-static > /dev/null 2>&1 || curl -L https://github.com/CompuRoot/static-sqlite3/releases/latest/download/sqlite3 -o sqlite-static && chmod +x sqlite-static'
    /usr/bin/env sh -c 'stat cos-tool-amd64 > /dev/null 2>&1 || curl -L -O https://github.com/canonical/cos-tool/releases/latest/download/cos-tool-amd64'
    pytest -v --tb native -s {posargs} {[vars]tst_path}/scenario
allowlist_externals =
    /usr/bin/env


[testenv:integration]
description = Run integration tests
deps =
    pytest-asyncio==0.21.1
    aiohttp
    asyncstdlib
    # Libjuju needs to track the juju version
    juju ~= 3.3.0
    pytest
    pytest-operator
    pytest-playwright
    lightkube
    git+https://github.com/canonical/iam-bundle@671a33419869fab1fe63d81873b41f6b181498e3#egg=oauth_tools
commands =
    playwright install
    pytest -vv --tb native --log-cli-level=INFO --color=yes -s {posargs} {toxinidir}/tests/integration
